"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[6244],{21926:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>o});var i=n(74848),s=n(28453);const a={sidebar_position:1},r="Unit Tests for Feedstack",c={id:"testing/unit-testing",title:"Unit Tests for Feedstack",description:"Unit testing is a critical component of software development, ensuring that individual components of the application function correctly. This document outlines the unit tests implemented for Feedstack.The tests validate the integrity of the Participant Model, DesignUpload Model, and various API endpoints within the application.",source:"@site/docs/testing/unit-testing.md",sourceDirName:"testing",slug:"/testing/unit-testing",permalink:"/project-feedstack/docs/testing/unit-testing",draft:!1,unlisted:!1,editUrl:"https://github.com/Capstone-Projects-2025-Spring/project-feedstack/edit/main/documentation/docs/testing/unit-testing.md",tags:[],version:"current",lastUpdatedBy:"Jason",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"Test Procedures",permalink:"/project-feedstack/docs/category/test-procedures"},next:{title:"Integration tests",permalink:"/project-feedstack/docs/testing/integration-testing"}},d={},o=[{value:"1. Testing the Participant Model",id:"1-testing-the-participant-model",level:2},{value:"Method: <code>__str__</code> representation of Participant model",id:"method-__str__-representation-of-participant-model",level:3},{value:"Explanation:",id:"explanation",level:4},{value:"Method: Participant creation with a unique ID",id:"method-participant-creation-with-a-unique-id",level:3},{value:"Explanation:",id:"explanation-1",level:4},{value:"2. Testing the DesignUpload Model",id:"2-testing-the-designupload-model",level:2},{value:"Method: <code>DesignUpload</code>-<code>Participant</code> relationship",id:"method-designupload-participant-relationship",level:3},{value:"Explanation:",id:"explanation-2",level:4},{value:"3. Testing the ParticipantView API",id:"3-testing-the-participantview-api",level:2},{value:"Method: Create a new participant",id:"method-create-a-new-participant",level:3},{value:"Explanation:",id:"explanation-3",level:4},{value:"4. Testing the DesignFeedbackView API",id:"4-testing-the-designfeedbackview-api",level:2},{value:"Method: Generate feedback for a design",id:"method-generate-feedback-for-a-design",level:3},{value:"Explanation:",id:"explanation-4",level:4},{value:"5. Testing the ChatbotView API",id:"5-testing-the-chatbotview-api",level:2},{value:"Method: Generate chat response",id:"method-generate-chat-response",level:3},{value:"Explanation:",id:"explanation-5",level:4},{value:"6. Testing the IdentifyThemeView API",id:"6-testing-the-identifythemeview-api",level:2},{value:"Method: Identify design theme",id:"method-identify-design-theme",level:3},{value:"Explanation:",id:"explanation-6",level:4}];function l(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"unit-tests-for-feedstack",children:"Unit Tests for Feedstack"}),"\n",(0,i.jsxs)(t.p,{children:["Unit testing is a critical component of software development, ensuring that individual components of the application function correctly. This document outlines the unit tests implemented for ",(0,i.jsx)(t.strong,{children:"Feedstack"}),".The tests validate the integrity of the ",(0,i.jsx)(t.strong,{children:"Participant Model"}),", ",(0,i.jsx)(t.strong,{children:"DesignUpload Model"}),", and various API endpoints within the application."]}),"\n",(0,i.jsx)(t.p,{children:"The unit tests cover the following:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["Testing the ",(0,i.jsx)(t.code,{children:"Participant"})," model"]}),"\n",(0,i.jsxs)(t.li,{children:["Testing the ",(0,i.jsx)(t.code,{children:"DesignUpload"})," model"]}),"\n",(0,i.jsxs)(t.li,{children:["Testing the ",(0,i.jsx)(t.code,{children:"ParticipantView"})," API"]}),"\n",(0,i.jsxs)(t.li,{children:["Testing the ",(0,i.jsx)(t.code,{children:"DesignFeedbackView"})," API"]}),"\n",(0,i.jsxs)(t.li,{children:["Testing the ",(0,i.jsx)(t.code,{children:"ChatbotView"})," API"]}),"\n",(0,i.jsxs)(t.li,{children:["Testing the ",(0,i.jsx)(t.code,{children:"IdentifyThemeView"})," API"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["Each test includes the ",(0,i.jsx)(t.strong,{children:"method"})," being tested, the ",(0,i.jsx)(t.strong,{children:"input"}),", the ",(0,i.jsx)(t.strong,{children:"expected result"}),", and a brief explanation of the ",(0,i.jsx)(t.strong,{children:"test's purpose"}),"."]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"1-testing-the-participant-model",children:"1. Testing the Participant Model"}),"\n",(0,i.jsxs)(t.h3,{id:"method-__str__-representation-of-participant-model",children:["Method: ",(0,i.jsx)(t.code,{children:"__str__"})," representation of Participant model"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'    def test_participant_string_representation(self):\n        participant = Participant.objects.create(participant_id="test123")\n        self.assertEqual(str(participant), "test123")\n'})}),"\n",(0,i.jsx)(t.h4,{id:"explanation",children:"Explanation:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Input:"})," A ",(0,i.jsx)(t.code,{children:"Participant"})," object is created with ",(0,i.jsx)(t.code,{children:'participant_id="test123"'}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Expected Result:"}),' The string representation of the object should return "test123".']}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Purpose:"})," Ensures that the ",(0,i.jsx)(t.code,{children:"__str__"})," method correctly returns the participant ID as a string."]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"method-participant-creation-with-a-unique-id",children:"Method: Participant creation with a unique ID"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'    def test_participant_unique_id(self):\n        Participant.objects.create(participant_id="unique_id")\n        with self.assertRaises(Exception):\n            Participant.objects.create(participant_id="unique_id")\n'})}),"\n",(0,i.jsx)(t.h4,{id:"explanation-1",children:"Explanation:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Input:"})," Two ",(0,i.jsx)(t.code,{children:"Participant"})," objects with the same ",(0,i.jsx)(t.code,{children:"participant_id"})," are created."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Expected Result:"})," The second creation attempt raises an exception."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Purpose:"})," Verifies that the ",(0,i.jsx)(t.code,{children:"participant_id"})," field is unique and prevents duplicate entries."]}),"\n"]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"2-testing-the-designupload-model",children:"2. Testing the DesignUpload Model"}),"\n",(0,i.jsxs)(t.h3,{id:"method-designupload-participant-relationship",children:["Method: ",(0,i.jsx)(t.code,{children:"DesignUpload"}),"-",(0,i.jsx)(t.code,{children:"Participant"})," relationship"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'    def test_design_upload_participant_relationship(self):\n        participant = Participant.objects.create(participant_id="design_tester")\n        design = DesignUpload.objects.create(\n            participant=participant,\n            feedback="Test feedback"\n        )\n        self.assertEqual(design.participant.participant_id, "design_tester")\n'})}),"\n",(0,i.jsx)(t.h4,{id:"explanation-2",children:"Explanation:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Input:"})," A ",(0,i.jsx)(t.code,{children:"DesignUpload"})," object is linked to a ",(0,i.jsx)(t.code,{children:"Participant"}),' with ID "design_tester".']}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Expected Result:"})," The retrieved ",(0,i.jsx)(t.code,{children:"participant_id"})," from ",(0,i.jsx)(t.code,{children:"DesignUpload"}),' matches "design_tester".']}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Purpose:"})," Ensures that each ",(0,i.jsx)(t.code,{children:"DesignUpload"})," is correctly associated with a ",(0,i.jsx)(t.code,{children:"Participant"}),"."]}),"\n"]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"3-testing-the-participantview-api",children:"3. Testing the ParticipantView API"}),"\n",(0,i.jsx)(t.h3,{id:"method-create-a-new-participant",children:"Method: Create a new participant"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"    def test_create_new_participant(self):\n        response = self.client.post(\n            reverse('participant'),\n            {'participant_id': 'new_user'},\n            format='json'\n        )\n        self.assertEqual(response.status_code, 201)\n        self.assertEqual(response.data['participant_id'], 'new_user')\n"})}),"\n",(0,i.jsx)(t.h4,{id:"explanation-3",children:"Explanation:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Input:"})," A ",(0,i.jsx)(t.code,{children:"POST"})," request is sent with ",(0,i.jsx)(t.code,{children:'participant_id="new_user"'}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Expected Result:"})," Returns HTTP status ",(0,i.jsx)(t.code,{children:"201"})," and the correct participant ID."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Purpose:"})," Confirms that the API successfully creates a new participant."]}),"\n"]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"4-testing-the-designfeedbackview-api",children:"4. Testing the DesignFeedbackView API"}),"\n",(0,i.jsx)(t.h3,{id:"method-generate-feedback-for-a-design",children:"Method: Generate feedback for a design"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"    @patch('feedback_app.views.client.chat.completions.create')\n    def test_design_feedback_generation(self, mock_openai):\n        mock_response = MagicMock()\n        mock_response.choices[0].message.content = \"This is AI feedback\"\n        mock_openai.return_value = mock_response\n        \n        participant = Participant.objects.create(participant_id=\"feedback_tester\")\n        image_data = \"data:image/jpeg;base64,...\" \n        \n        response = self.client.post(\n            reverse('design_feedback'),\n            {\n                'participant': 'feedback_tester',\n                'image': image_data\n            },\n            format='json'\n        )\n        \n        self.assertEqual(response.status_code, 201)\n        self.assertEqual(response.data['feedback'], \"This is AI feedback\")\n"})}),"\n",(0,i.jsx)(t.h4,{id:"explanation-4",children:"Explanation:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Input:"})," A ",(0,i.jsx)(t.code,{children:"POST"})," request is sent with ",(0,i.jsx)(t.code,{children:"participant_id"})," and a base64-encoded image."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Expected Result:"})," Returns HTTP status ",(0,i.jsx)(t.code,{children:"201"})," and AI-generated feedback."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Purpose:"})," Ensures that the AI feedback generation process functions correctly."]}),"\n"]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"5-testing-the-chatbotview-api",children:"5. Testing the ChatbotView API"}),"\n",(0,i.jsx)(t.h3,{id:"method-generate-chat-response",children:"Method: Generate chat response"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"    @patch('feedback_app.views.client.chat.completions.create')\n    def test_chatbot_response_generation(self, mock_openai):\n        mock_response = MagicMock()\n        mock_response.choices[0].message.content = \"This is a chat response\"\n        mock_openai.return_value = mock_response\n        \n        participant = Participant.objects.create(participant_id=\"chat_tester\")\n        design = DesignUpload.objects.create(\n            participant=participant,\n            feedback=\"Initial feedback\"\n        )\n        \n        response = self.client.post(\n            reverse('chatbot'),\n            {\n                'participant_id': 'chat_tester',\n                'message': 'Test question'\n            },\n            format='json'\n        )\n        \n        self.assertEqual(response.status_code, 201)\n        self.assertEqual(\n            response.data['bot_message']['content'],\n            \"This is a chat response\"\n        )\n"})}),"\n",(0,i.jsx)(t.h4,{id:"explanation-5",children:"Explanation:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Input:"})," A ",(0,i.jsx)(t.code,{children:"POST"})," request is sent with ",(0,i.jsx)(t.code,{children:"participant_id"})," and a chat message."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Expected Result:"})," Returns HTTP status ",(0,i.jsx)(t.code,{children:"201"})," and AI-generated chat response."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Purpose:"})," Verifies that the chatbot API generates appropriate responses."]}),"\n"]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"6-testing-the-identifythemeview-api",children:"6. Testing the IdentifyThemeView API"}),"\n",(0,i.jsx)(t.h3,{id:"method-identify-design-theme",children:"Method: Identify design theme"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"    @patch('feedback_app.views.client.chat.completions.create')\n    def test_theme_identification(self, mock_openai):\n        mock_response = MagicMock()\n        mock_response.choices[0].message.content = \"typography\"\n        mock_openai.return_value = mock_response\n        \n        response = self.client.post(\n            reverse('identify_theme'),\n            {'message': 'This design has great font choices'},\n            format='json'\n        )\n        \n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.data['theme'], \"typography\")\n"})}),"\n",(0,i.jsx)(t.h4,{id:"explanation-6",children:"Explanation:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Input:"})," A ",(0,i.jsx)(t.code,{children:"POST"})," request is sent with a message related to typography."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Expected Result:"})," Returns HTTP status ",(0,i.jsx)(t.code,{children:"200"}),' and identifies the theme as "typography".']}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Purpose:"})," Ensures that the AI correctly identifies and categorizes design themes."]}),"\n"]}),"\n",(0,i.jsx)(t.hr,{})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var i=n(96540);const s={},a=i.createContext(s);function r(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);